package shares.brokering.client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.me.sharesbrokeringsystem.CertificateException_Exception;
import org.me.sharesbrokeringsystem.Company;
import org.me.sharesbrokeringsystem.SharePrice;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Bartek
 */
public class advancedSearch extends javax.swing.JFrame 
{
    DefaultTableModel model;
    ListSelectionModel companyListSelectionModel;
    List<Company> companyList;
    TableRowSorter<? extends TableModel> tableRowSorter;
    String[] currencyCodes = { "AUD", "BGN", "BRL", "BWP", "CAD", "CHF", "CLP", "CNY", "COP", "DKK", "EEK", 
    "EGP", "EUR", "GBP", "HKD", "HRK", "HUF", "ILS", "INR", "ISK", "JPY", "KRW",
    "KZT", "LKR", "LTL", "LVL", "LYD", "MXN", "MYR", "NOK", "NPR", "NZD", "OMR",
    "PKR", "QAR", "RON", "RUB", "SAR", "SDG", "SEK", "SGD", "THB", "TRY", "TTD",
    "TWD", "UAH", "USD", "VEB", "ZAR" };
    
    /**
     * Creates new form advancedSearch
     * @param _companyList
     */
    public advancedSearch(List<Company> _companyList) 
    {
        initComponents();
        this.model = (DefaultTableModel) TradeList.getModel();
        this.companyListSelectionModel = (ListSelectionModel) TradeList.getSelectionModel();
        
        //Row sorting variables for table filtering
        tableRowSorter = (TableRowSorter<DefaultTableModel>) TradeList.getRowSorter();
        
        companyList = _companyList;
        
        for (Company c : companyList)
        {
            model.addRow(new Object[]{c.getSymbol(), c.getName(), c.getSector(), Integer.parseInt(c.getVolume()), Math.floor(c.getPrice().getValue() * 100) / 100
                    , c.getPrice().getCurrency()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        moreInfoButton = new javax.swing.JButton();
        TradeListPane = new javax.swing.JScrollPane();
        TradeList = new javax.swing.JTable();
        clearButton = new javax.swing.JButton();
        nameFilterBox = new javax.swing.JTextField();
        symbolFilterBox = new javax.swing.JTextField();
        sectorFilterBox = new javax.swing.JTextField();
        symbolFilterLabel = new javax.swing.JLabel();
        nameFilterLabel = new javax.swing.JLabel();
        sectorFilterLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        moreInfoButton.setText("More Info");
        moreInfoButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                moreInfoButtonActionPerformed(evt);
            }
        });

        TradeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Symbol", "Name", "Sector", "Volume", "Price", "Currency"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        TradeList.setColumnSelectionAllowed(true);
        TradeList.setAutoCreateRowSorter(true);
        TradeListPane.setViewportView(TradeList);
        TradeList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        JComboBox comboBox = new JComboBox<>(currencyCodes);
        comboBox.addItemListener(new ItemListener()
            {
                @Override
                public void itemStateChanged(ItemEvent e)
                {
                    if(e.getStateChange() == ItemEvent.SELECTED)
                    {
                        try
                        {
                            String companySymbol = (String) TradeList.getValueAt(TradeList.getSelectedRow(), 0);
                            int companyRow = findRowNumber(companySymbol);
                            Company tempComp = companyList.get(companyRow);

                            String selectedCurrency = (String) comboBox.getSelectedItem();
                            SharePrice newPrice = convertAmount(tempComp.getPrice(), selectedCurrency);

                            System.out.println(tempComp.getPrice().getHighValue() + " "
                                + tempComp.getPrice().getCloseValue());
                            tempComp.setPrice(newPrice);

                            //loadContentToTable();
                            int rowNumber = TradeList.getSelectedRow();
                            if (TradeList.getRowSorter() != null)
                            {
                                rowNumber = TradeList.getRowSorter().convertRowIndexToModel(rowNumber);
                            }

                            model.setValueAt(Math.floor(tempComp.getPrice().getValue() * 100) / 100, rowNumber, 4);

                            System.out.println("Test 5");
                        } catch (Exception ex)
                        {
                            System.out.println(ex.toString());
                        }
                    }
                }
            });

            TableColumn comboColumn = TradeList.getColumnModel().getColumn(5);
            comboColumn.setCellEditor(new DefaultCellEditor(comboBox));

            clearButton.setText("Clear filters");
            clearButton.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    clearButtonActionPerformed(evt);
                }
            });

            nameFilterBox.setToolTipText("Name Filter");

            symbolFilterBox.setToolTipText("Symbol Filter");

            sectorFilterBox.setToolTipText("sector Filter");

            symbolFilterLabel.setText("Symbol filter:");

            nameFilterLabel.setText("Name filter:");

            sectorFilterLabel.setText("Sector filter:");

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(43, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(sectorFilterLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(sectorFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(symbolFilterLabel)
                                .addComponent(nameFilterLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(symbolFilterBox)
                                .addComponent(nameFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGap(82, 82, 82)
                    .addComponent(clearButton)
                    .addGap(18, 18, 18)
                    .addComponent(moreInfoButton)
                    .addGap(21, 21, 21))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TradeListPane, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                        .addContainerGap()))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(261, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(symbolFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(symbolFilterLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(nameFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nameFilterLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(sectorFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sectorFilterLabel)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(moreInfoButton)
                            .addComponent(clearButton)))
                    .addGap(71, 71, 71))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TradeListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(152, Short.MAX_VALUE)))
            );

            nameFilterBox.getDocument().addDocumentListener(
                new DocumentListener()
                {
                    @Override public void insertUpdate(DocumentEvent e) { filterTable(); }
                    @Override public void removeUpdate(DocumentEvent e) { filterTable(); }
                    @Override public void changedUpdate(DocumentEvent e) {}
                });
                symbolFilterBox.getDocument().addDocumentListener(
                    new DocumentListener()
                    {
                        @Override public void insertUpdate(DocumentEvent e) { filterTable(); }
                        @Override public void removeUpdate(DocumentEvent e) { filterTable(); }
                        @Override public void changedUpdate(DocumentEvent e) {}
                    });
                    sectorFilterBox.getDocument().addDocumentListener(
                        new DocumentListener()
                        {
                            @Override public void insertUpdate(DocumentEvent e) { filterTable(); }
                            @Override public void removeUpdate(DocumentEvent e) { filterTable(); }
                            @Override public void changedUpdate(DocumentEvent e) {}

                        });

                        pack();
                    }// </editor-fold>//GEN-END:initComponents

    private void moreInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreInfoButtonActionPerformed
        try
        {
            String companySymbol = (String) TradeList.getValueAt(TradeList.getSelectedRow(), 0);
            int companyRow = findRowNumber(companySymbol);
            Company tempCompany = moreCompanyInfo(companyList.get(companyRow));
            String tempCurrency = tempCompany.getPrice().getCurrency();
            
            if (!tempCurrency.equals("USD"))
            {
                tempCompany.setPrice(convertAmount(tempCompany.getPrice(), "USD"));
                System.out.println("Unconverting");
            }
            
            System.out.println("Fetching company info");
            tempCompany = moreCompanyInfo(tempCompany);
            
            if (!tempCurrency.equals("USD"))
            {
               tempCompany.setPrice(convertAmount(tempCompany.getPrice(), tempCurrency));
               System.out.println("Reconverting");
            }
            
            ShareInfo shareInfoDialog = new ShareInfo(tempCompany);
            shareInfoDialog.setVisible(true);
            shareInfoDialog.setLocationRelativeTo(this);
        } catch (ArrayIndexOutOfBoundsException ex) {} 
        catch (CertificateException_Exception ex)
        {
            Logger.getLogger(SharesBrokeringUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_moreInfoButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        symbolFilterBox.setText("");
        nameFilterBox.setText("");
        sectorFilterBox.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TradeList;
    private javax.swing.JScrollPane TradeListPane;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton moreInfoButton;
    private javax.swing.JTextField nameFilterBox;
    private javax.swing.JLabel nameFilterLabel;
    private javax.swing.JTextField sectorFilterBox;
    private javax.swing.JLabel sectorFilterLabel;
    private javax.swing.JTextField symbolFilterBox;
    private javax.swing.JLabel symbolFilterLabel;
    // End of variables declaration//GEN-END:variables

    void loadContentToTable()
    {
        model.getDataVector().removeAllElements();
        for (Company c : companyList)
        {
            model.addRow(new Object[]{c.getSymbol(), c.getName(), c.getSector(), c.getVolume(), Double.toString(Math.floor(c.getPrice().getValue() * 100) / 100), 
                c.getPrice().getCurrency()});
        }
    }
    
    void filterTable()
    {
        RowFilter<TableModel, Object> firstFilter = RowFilter.regexFilter(symbolFilterBox.getText(), 0);
        RowFilter<TableModel, Object> secondFilter = RowFilter.regexFilter(nameFilterBox.getText(), 1);
        RowFilter<TableModel, Object> thirdFilter = RowFilter.regexFilter(sectorFilterBox.getText(), 2);
        
        List<RowFilter<TableModel, Object>> filters = new ArrayList<>();
        filters.add(firstFilter);
        filters.add(secondFilter);
        filters.add(thirdFilter);
        
        RowFilter<TableModel, Object>  compoundRowFilter = RowFilter.andFilter(filters);
        
        tableRowSorter.setRowFilter(compoundRowFilter);
    }
    
    int findRowNumber(String symbol)
    {
        for(int i = 0; i < companyList.size(); i++)
        {
            if (companyList.get(i).getSymbol().equals(symbol))
                return i;
        }
        return -1;
    }

    private static Company moreCompanyInfo(org.me.sharesbrokeringsystem.Company company) throws CertificateException_Exception
    {
        org.me.sharesbrokeringsystem.SharesBrokeringSystem_Service service = new org.me.sharesbrokeringsystem.SharesBrokeringSystem_Service();
        org.me.sharesbrokeringsystem.SharesBrokeringSystem port = service.getSharesBrokeringSystemPort();
        return port.moreCompanyInfo(company);
    }

    private static SharePrice convertAmount(org.me.sharesbrokeringsystem.SharePrice amount, java.lang.String to)
    {
        org.me.sharesbrokeringsystem.CurrencyConversion_Service service = new org.me.sharesbrokeringsystem.CurrencyConversion_Service();
        org.me.sharesbrokeringsystem.CurrencyConversion port = service.getCurrencyConversionPort();
        return port.convertAmount(amount, to);
    }
    
}
